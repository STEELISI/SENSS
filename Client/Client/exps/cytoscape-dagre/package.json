{
  "_from": "cytoscape-dagre-2.2.2.tgz",
  "_id": "cytoscape-dagre@2.2.2",
  "_inBundle": false,
  "_integrity": "sha512-zsg36qNwua/L2stJSWkcbSDcvW3E6VZf6KRe6aLnQJxuXuz89tMqI5EVYVKEcNBgzTEzFMFv0PE3T0nD4m6VDw==",
  "_location": "/cytoscape-dagre",
  "_phantomChildren": {},
  "_requested": {
    "type": "tag",
    "registry": true,
    "raw": "cytoscape-dagre",
    "name": "cytoscape-dagre",
    "escapedName": "cytoscape-dagre",
    "rawSpec": "",
    "saveSpec": null,
    "fetchSpec": "latest"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "cytoscape-dagre-2.2.2.tgz",
  "_shasum": "5f32a85c0ba835f167efee531df9e89ac58ff411",
  "_spec": "cytoscape-dagre",
  "_where": "/Users/Shivram",
  "author": {
    "name": "Max Franz",
    "email": "maxkfranz@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/cytoscape/cytoscape.js-dagre/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "dagre": "^0.8.2"
  },
  "deprecated": false,
  "description": "The Dagre layout for DAGs and trees for Cytoscape.js",
  "devDependencies": {
    "babel-core": "^6.24.1",
    "babel-loader": "^7.0.0",
    "babel-preset-env": "^1.5.1",
    "camelcase": "^4.1.0",
    "chai": "4.0.2",
    "cpy-cli": "^1.0.1",
    "cross-env": "^5.0.0",
    "eslint": "^3.9.1",
    "gh-pages": "^1.0.0",
    "mocha": "3.4.2",
    "npm-run-all": "^4.1.2",
    "rimraf": "^2.6.2",
    "update": "^0.7.4",
    "updater-license": "^1.0.0",
    "webpack": "^2.7.0",
    "webpack-dev-server": "^2.4.5"
  },
  "homepage": "https://github.com/cytoscape/cytoscape.js-dagre",
  "keywords": [
    "cytoscape",
    "cytoscape-extension"
  ],
  "license": "MIT",
  "main": "cytoscape-dagre.js",
  "name": "cytoscape-dagre",
  "peerDependencies": {
    "cytoscape": "^3.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cytoscape/cytoscape.js-dagre.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production webpack",
    "build:min": "cross-env NODE_ENV=production MIN=true webpack",
    "build:release": "run-s build copyright",
    "copyright": "update license",
    "dev": "webpack-dev-server --open",
    "gh-pages:clean": "rimraf index.html",
    "gh-pages:demo": "cpy demo.html . --rename=index.html",
    "gh-pages:deploy": "gh-pages -d . -v node_modules/**",
    "lint": "eslint src",
    "postpublish": "run-s gh-pages:demo gh-pages:deploy gh-pages:clean",
    "test": "mocha",
    "watch": "webpack --progress --watch"
  },
  "version": "2.2.2",
  "readme": "cytoscape-dagre\n================================================================================\n\n[![DOI](https://zenodo.org/badge/42206402.svg)](https://zenodo.org/badge/latestdoi/42206402)\n\n## Description\n\nThe Dagre layout for DAGs and trees for Cytoscape.js ([demo](https://cytoscape.github.io/cytoscape.js-dagre))\n\nThe `dagre` layout organises the graph using a DAG (directed acyclic graph) system, written by [Chris Pettitt](https://www.linkedin.com/in/chrismpettitt).  It is especially suitable for DAGs and trees.  For more information, please refer to its [Dagre's documentation](https://github.com/cpettitt/dagre).\n\n## Dependencies\n\n * Cytoscape.js ^3.2.0\n * Dagre ^0.8.2\n\n\n## Usage instructions\n\nDownload the library:\n * via npm: `npm install cytoscape-dagre`,\n * via bower: `bower install cytoscape-dagre`, or\n * via direct download in the repository (probably from a tag).\n\nImport the library as appropriate for your project:\n\nES import:\n\n```js\nimport cytoscape from 'cytoscape';\nimport dagre from 'cytoscape-dagre';\n\ncytoscape.use( dagre );\n```\n\nCommonJS require:\n\n```js\nlet cytoscape = require('cytoscape');\nlet dagre = require('cytoscape-dagre');\n\ncytoscape.use( dagre ); // register extension\n```\n\nAMD:\n\n```js\nrequire(['cytoscape', 'cytoscape-dagre'], function( cytoscape, dagre ){\n  dagre( cytoscape ); // register extension\n});\n```\n\nPlain HTML/JS has the extension registered for you automatically, because no `require()` is needed.\n\n\n## API\n\nCall the layout, e.g. `cy.layout({ name: 'dagre', ... }).run()`, with options:\n\n```js\nvar defaults = {\n  // dagre algo options, uses default value on undefined\n  nodeSep: undefined, // the separation between adjacent nodes in the same rank\n  edgeSep: undefined, // the separation between adjacent edges in the same rank\n  rankSep: undefined, // the separation between adjacent nodes in the same rank\n  rankDir: undefined, // 'TB' for top to bottom flow, 'LR' for left to right,\n  ranker: undefined, // Type of algorithm to assign a rank to each node in the input graph. Possible values: 'network-simplex', 'tight-tree' or 'longest-path'\n  minLen: function( edge ){ return 1; }, // number of ranks to keep between the source and target of the edge\n  edgeWeight: function( edge ){ return 1; }, // higher weight edges are generally made shorter and straighter than lower weight edges\n\n  // general layout options\n  fit: true, // whether to fit to viewport\n  padding: 30, // fit padding\n  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node\n  animate: false, // whether to transition the node positions\n  animateFilter: function( node, i ){ return true; }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions\n  animationDuration: 500, // duration of animation in ms if enabled\n  animationEasing: undefined, // easing of animation if enabled\n  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  transform: function( node, pos ){ return pos; }, // a function that applies a transform to the final node position\n  ready: function(){}, // on layoutready\n  stop: function(){} // on layoutstop\n};\n```\n\n\n## Build targets\n\n* `npm run test` : Run Mocha tests in `./test`\n* `npm run build` : Build `./src/**` into `cytoscape-dagre.js`\n* `npm run watch` : Automatically build on changes with live reloading (N.b. you must already have an HTTP server running)\n* `npm run dev` : Automatically build on changes with live reloading with webpack dev server\n* `npm run lint` : Run eslint on the source\n\nN.b. all builds use babel, so modern ES features can be used in the `src`.\n\n\n## Publishing instructions\n\nThis project is set up to automatically be published to npm and bower.  To publish:\n\n1. Build the extension : `npm run build:release`\n1. Commit the build : `git commit -am \"Build for release\"`\n1. Bump the version number and tag: `npm version major|minor|patch`\n1. Push to origin: `git push && git push --tags`\n1. Publish to npm: `npm publish .`\n1. If publishing to bower for the first time, you'll need to run `bower register cytoscape-dagre https://github.com/cytoscape/cytoscape.js-dagre.git`\n1. [Make a new release](https://github.com/cytoscape/cytoscape.js-dagre/releases/new) for Zenodo.\n",
  "readmeFilename": "README.md",
  "dist": {
    "shasum": "407bc882b3fa868c3fab64d29951515c48790294"
  }
}
